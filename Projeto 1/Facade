package br.ufal.ic.p2.wepayu;

import br.ufal.ic.p2.wepayu.Exception.*;
import br.ufal.ic.p2.wepayu.models.*;

import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
import java.beans.XMLDecoder;
import java.beans.XMLEncoder;

public class Facade {

    private String arquivo = "dados.xml";
    public static List<Empregado> trabalhadores = new ArrayList<>();
    private boolean acessado = false;

    public void zerarSistema(){

        if (!trabalhadores.isEmpty()){
            trabalhadores.clear();
        }
        //limpar o arquivo XML
        try(FileOutputStream output = new FileOutputStream(arquivo);
            XMLEncoder escritor = new XMLEncoder(output)){

        }catch(IOException e){
            System.err.println("Erro ao limpar o arquivo: " + e.getMessage());
        }
        Horarios.limpar();
        Vendas.limpar();
    }

    public void alterarEmpregado(String nome, String tipo, String valor){
        //fazer
    }

    public void alterarEmpregado(String nome, String tipo, boolean valor){
        //fazer quando tipo = sindicalizado e valor = false
        //valor ├® para ser String
    }

    public void alterarEmpregado(String nome, String tipo, boolean valor, String idSindicato, String taxaSindical){
        //fazer quando tipo = sindicalizado e valor = true
        //valor ├® para ser String
    }

    public void alterarEmpregado(String nome, String tipo, String valor, String banco, String agencia, String contaCorrente){
        //fazer quando tipo = metodoPagamento e valor = banco
    }

    public String criarEmpregado(String nome, String endereco, String tipo, String salario) throws NomeNaoPodeSerNuloException {
        Gerente.direcionar(nome, endereco, tipo, salario, getNextId());
        return getLastId();
    }

    public String criarEmpregado(String nome, String endereco, String tipo , String salario, String comissao) throws NomeNaoPodeSerNuloException{

        Gerente.direcionar(nome, endereco, tipo, salario, getNextId(), comissao);
        return getLastId();
    }

    public void encerrarSistema(){
        //Salvar no arquivo XML
        try(FileOutputStream output = new FileOutputStream(arquivo);
            XMLEncoder escritor = new XMLEncoder(output)){
            escritor.writeObject(trabalhadores);

        }catch(IOException e){
            System.out.println("Erro ao abrir o arquivo:" + e.getMessage());
        }
        Horarios.salvar();
        Vendas.salvar();
    }

    public String getAtributoEmpregado(String emp, String atributo) throws EmpregadoNaoExisteException{

        if (!isAcessado()) abrir();
        return Gerente.atributo(emp, atributo);
    }

    public String getEmpregadoPorNome(String nome, int indice) throws EmpregadoNaoExisteException{

        if (!isAcessado()) abrir();
        return Gerente.empregadoPorNome(nome, indice, trabalhadores);

    }

    public String getHorasExtrasTrabalhadas(String emp, String dataInicial, String dataFinal) throws EmpregadoNaoEhHoristaException{
        return Horarios.HorasExtras(emp, dataInicial, dataFinal);
    }

    public String getHorasNormaisTrabalhadas(String emp, String dataInicial, String dataFinal) throws EmpregadoNaoEhHoristaException{
        return Horarios.horasNormais(emp, dataInicial, dataFinal);
    }

    public String getTaxasServico(String emp, String dataInicial, String dataFinal){
        //Ler documentacao para fazer
        return "";
    }

    public String getVendasRealizadas(String emp, String dataInicial, String dataFinal){
        return Vendas.vendasFeitas(emp, dataInicial, dataFinal);
    }

    public void lancaCartao(String emp, String data, String horas) throws EmpregadoNaoEhHoristaException{
        Horarios.lancaCartao(emp, data, horas);
    }

    public void lancataxaServico(String emp, String data, String valor){
        //n├úo sei o que ├® para fazer
    }

    public void lancaVenda(String emp, String data, String valor) throws EmpregadoNaoEhComissionadoException{
        Vendas.lancar(emp, data, valor);
    }

    public void removerEmpregado(String emp) throws EmpregadoNaoExisteException{
        //demitido
        if (!isAcessado()) abrir();
        Gerente.remover(emp);

    }

    public void redo(){
        //refazer o ├║ltimo comando?
    }

    public void rodaFolha(String data, String saida){
        //n├úo fa├ºo ideia
    }

    public String totalFolha(String data){
        //Sem ideia
        return "";
    }

    public void undo(){
        //desfazer o ├║ltimo comando?
    }

    public void abrir(){

        try(FileInputStream input = new FileInputStream(arquivo);
            XMLDecoder leitor = new XMLDecoder(input)){
            trabalhadores = (List<Empregado>) leitor.readObject();
            setAcessado(true);
        }catch(IOException | IndexOutOfBoundsException e){
            if (!(e instanceof  IndexOutOfBoundsException)){
                System.out.println("Erro ao abrir o arquivo: " + ((IOException) e).getMessage());
            }
        }
    }

    public static void adicionarEmpregado(Empregado novo){
        trabalhadores.add(novo);
    }

    public boolean isAcessado() {
        return acessado;
    }

    public void setAcessado(boolean acessado) {
        this.acessado = acessado;
    }

    public String getLastId(){
        return (!trabalhadores.isEmpty()) ? trabalhadores.getLast().getId() : "0";
    }

    public String getNextId(){
        return (!trabalhadores.isEmpty()) ? Integer.toString(Integer.parseInt(trabalhadores.getLast().getId()) + 1) : "1";
    }
}
